source("complete.R")
corr <- function(directory, threshold = 0){
files<-list.files(directory)
k<-1
cr<-vector("numeric",length = length(x[ ,"id"]))
x<-complete(directory)
for(i in x[ ,"id"]){
if(x[i,"nobs"]>threshold){
y<-read.csv(paste(directory,files[i],sep="/"))
good<-complete.cases(y[ ,2],y[ ,3])
z<-y[good, ]
cr[k]<-cor(z[ ,2],z[ ,3])
k<-k+1
}
}
cr[1:k-1]
}
source("complete.R")
corr <- function(directory, threshold = 0){
files<-list.files(directory)
k<-1
cr<-vector("numeric",length = length(x[ ,"id"]))
x<-complete(directory)
for(i in x[ ,"id"]){
if(x[i,"nobs"]>threshold){
y<-read.csv(paste(directory,files[i],sep="/"))
good<-complete.cases(y[ ,2],y[ ,3])
z<-y[good, ]
cr[k]<-cor(z[ ,2],z[ ,3])
k<-k+1
}
}
cr[1:k-1]
}
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata")
cr <- corr("specdata")
cr <- corr("specdata")
source("complete.R")
corr <- function(directory, threshold = 0){
files<-list.files(directory)
k<-1
cr<-vector("numeric",length = length(x[ ,"id"]))
x<-complete(directory)
for(i in x[ ,"id"]){
if(x[i,"nobs"]>threshold){
y<-read.csv(paste(directory,files[i],sep="/"))
good<-complete.cases(y[ ,2],y[ ,3])
z<-y[good, ]
cr[k]<-cor(z[ ,2],z[ ,3])
k<-k+1
}
}
cr[1:k-1]
}
cr <- corr("specdata")
source("complete.R")
corr <- function(directory, threshold = 0){
files<-list.files(directory)
k<-1
cr<-vector("numeric",length = length(x[ ,"id"]))
x<-complete(directory)
for(i in x[ ,"id"]){
if(x[i,"nobs"]>threshold){
y<-read.csv(paste(directory,files[i],sep="/"))
good<-complete.cases(y[ ,2],y[ ,3])
z<-y[good, ]
cr[k]<-cor(z[ ,2],z[ ,3])
k<-k+1
}
}
cr[1:k-1]
}
t<-corr("specdata")
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
source("complete.R")
corr <- function(directory, threshold = 0){
files<-list.files(directory)
k<-1
cr<-vector("numeric",length = length(x[ ,"id"]))
x<-complete(directory)
for(i in x[ ,"id"]){
if(x[i,"nobs"]>threshold){
y<-read.csv(paste(directory,files[i],sep="/"))
good<-complete.cases(y[ ,2],y[ ,3])
z<-y[good, ]
cr[k]<-cor(z[ ,2],z[ ,3])
k<-k+1
}
}
cr[1:k-1]
}
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
complete <- function(directory, id = 1:332){
complete <- function(directory, id = 1:332){
nobs<-vector("numeric",length=length(id))
k<-1
files<-list.files(directory)
for(i in id){
x<-read.csv(paste(directory,files[i],sep="/"))
good<-complete.cases(x[ ,2],x[ ,3])
y<-x[good, ]
nobs[k]<-nrow(y)
k<-k+1
}
data.frame(id,nobs)
}
q
1
}}
complete <- function(directory, id = 1:332){
nobs<-vector("numeric",length=length(id))
k<-1
files<-list.files(directory)
for(i in id){
x<-read.csv(paste(directory,files[i],sep="/"))
good<-complete.cases(x[ ,2],x[ ,3])
y<-x[good, ]
nobs[k]<-nrow(y)
k<-k+1
}
data.frame(id,nobs)
}
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cc <- complete("specdata", 332:1)
cc
source("complete.R")
corr <- function(directory, threshold = 0){
files<-list.files(directory)
k<-1
x<-complete(directory)
cr<-vector("numeric",length = length(x[ ,"id"]))
for(i in x[ ,"id"]){
if(x[i,"nobs"]>threshold){
y<-read.csv(paste(directory,files[i],sep="/"))
good<-complete.cases(y[ ,2],y[ ,3])
z<-y[good, ]
cr[k]<-cor(z[ ,2],z[ ,3])
k<-k+1
}
}
cr[1:k-1]
}
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
badbest <- function(state, outcome){
x<-read.csv('rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv',colClasses="character")
y<-x[ ,7]==state
z<-x[y, ]
if(nrow(z)==0){
stop("invalid state")
}
if(outcome=="heart attack"){
z[ ,11]<-as.numeric(z[ ,11])
bad<-is.na(z[ ,11])
y<-z[!bad, ]
t<-min(y[ ,11])
z<-y[ ,11]==t
}
else if(outcome=="heart failure")
{
z[ ,17]<-as.numeric(z[ ,17])
bad<-is.na(z[ ,17])
y<-z[!bad, ]
t<-min(y[ ,17])
z<-y[ ,17]==t
}
else if(outcome=="pneumonia")
{
z[ ,23]<-as.numeric(z[ ,23])
bad<-is.na(z[ ,23])
y<-z[!bad, ]
t<-min(y[ ,23])
z<-y[ ,23]==t
}
else
{
stop("invalid outcome")
}
v<-y[z, ]
g<-sort(v[ ,2])
g[1]
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital <- function(state, outcome, num = "best")
{
x<-read.csv('rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv',colClasses="character")
y<-x[ ,7]==state
z<-x[y, ]
if(nrow(z)==0){
stop("invalid state")
}
if(outcome=="heart attack"){
z[ ,11]<-as.numeric(z[ ,11])
bad<-is.na(z[ ,11])
y<-z[!bad, ]
z<-y[order(y[ ,11],y[ ,2]), ]
}
else if(outcome=="heart failure")
{
z[ ,17]<-as.numeric(z[ ,17])
bad<-is.na(z[ ,17])
y<-z[!bad, ]
z<-y[order(y[ ,17],y[ ,2]), ]
}
else if(outcome=="pneumonia")
{
z[ ,23]<-as.numeric(z[ ,23])
bad<-is.na(z[ ,23])
y<-z[!bad, ]
z<-y[order(y[ ,23],y[ ,2]), ]
}
else
{
stop("invalid outcome")
}
t<-z[ ,2]
l<-length(t)
if(l==0)
y<-NA
else if(num=="best")
y<-t[1]
else if(num=="worst")
y<-t[l]
else if(num>l)
y<-NA
else
y<-t[num]
y
}
rankhospital("NC", "heart attack", "worst")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
rankall <- function(outcome, num = "best")
{
x<-read.csv('rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv',colClasses="character")
y<-unique(x[ ,7])
y<-sort(y)
t<-vector("character",length=length(y))
k<-1
for(i in y){
z<-x[ ,7]==i
m<-x[z, ]
if(outcome=="heart attack"){
m[ ,11]<-as.numeric(m[ ,11])
bad<-is.na(m[ ,11])
z<-m[!bad, ]
m<-z[order(z[ ,11],z[ ,2]), ]
}
else if(outcome=="heart failure")
{
m[ ,17]<-as.numeric(m[ ,17])
bad<-is.na(m[ ,17])
z<-m[!bad, ]
m<-z[order(z[ ,17],z[ ,2]), ]
}
else if(outcome=="pneumonia")
{
m[ ,23]<-as.numeric(m[ ,23])
bad<-is.na(m[ ,23])
z<-m[!bad, ]
m<-z[order(z[ ,23],z[ ,2]), ]
}
else
{
stop("invalid outcome")
}
p<-m[ ,2]
l<-length(p)
if(l==0)
t[k]<-NA
else if(num=="best")
t[k]<-p[1]
else if(num=="worst")
t[k]<-p[l]
else if(num>l)
t[k]<-NA
else
t[k]<-p[num]
k<-k+1
}
hospital<-t
state<-y
n<-data.frame(hospital,state)
n
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
library(data.table)
#read X_test.txt file
x<-read.table("./test/X_test.txt")
#change the column names of X_test.txt data frame
names(x)<-read.table("features.txt")[,2]
#read y_test.txt
y<-read.table("./test/y_test.txt")
#change its column name
names(y)<-"activity_lables"
#read subject_test
z<-read.table("./test/subject_test.txt")
#change its name
names(z)<-"volunteer"
#bind x,y,z to form test data frame
test<-cbind(x,y,z)
#Repeat above steps to create train data frame
x_train <-read.table("./train/X_train.txt")
names(x_train) <- read.table("features.txt")[,2]
y_train <- read.table("./train/y_train.txt")
names(y_train)<-"activity_lables"
z_train <- read.table("./train/subject_train.txt")
names(z_train)<-"volunteer"
train<-cbind(x_train,y_train,z_train)
#merge test and train data frame.
merged_data <- rbind(test,train)
#Extracts only the measurements on the mean and standard deviation for each measurement
req_col<-grepl("mean|std",names(merged_data))
req_col[562:563]<-c(TRUE,TRUE)
req_data<-merged_data[ ,req_col]
#Uses descriptive activity names to name the activities in the data set
req_data$activity_lables[req_data$activity_lables==1]<-"Walking"
req_data$activity_lables[req_data$activity_lables==2]<-"Walking Upstairs"
req_data$activity_lables[req_data$activity_lables==3]<-"Walking Downstairs"
req_data$activity_lables[req_data$activity_lables==4]<-"Sitting"
req_data$activity_lables[req_data$activity_lables==5]<-"Standing"
req_data$activity_lables[req_data$activity_lables==6]<-"Laying"
#Appropriately labels the data set with descriptive variable names.
names(req_data) <- gsub("Acc", "Accelerator", names(req_data))
names(req_data) <- gsub("Mag", "Magnitude", names(req_data))
setwd("C:/R/UCI HAR Dataset")
library(data.table)
#read X_test.txt file
x<-read.table("./test/X_test.txt")
#change the column names of X_test.txt data frame
names(x)<-read.table("features.txt")[,2]
#read y_test.txt
y<-read.table("./test/y_test.txt")
#change its column name
names(y)<-"activity_lables"
#read subject_test
z<-read.table("./test/subject_test.txt")
#change its name
names(z)<-"volunteer"
#bind x,y,z to form test data frame
test<-cbind(x,y,z)
#Repeat above steps to create train data frame
x_train <-read.table("./train/X_train.txt")
names(x_train) <- read.table("features.txt")[,2]
y_train <- read.table("./train/y_train.txt")
names(y_train)<-"activity_lables"
z_train <- read.table("./train/subject_train.txt")
names(z_train)<-"volunteer"
train<-cbind(x_train,y_train,z_train)
#merge test and train data frame.
merged_data <- rbind(test,train)
#Extracts only the measurements on the mean and standard deviation for each measurement
req_col<-grepl("mean|std",names(merged_data))
req_col[562:563]<-c(TRUE,TRUE)
req_data<-merged_data[ ,req_col]
#Uses descriptive activity names to name the activities in the data set
req_data$activity_lables[req_data$activity_lables==1]<-"Walking"
req_data$activity_lables[req_data$activity_lables==2]<-"Walking Upstairs"
req_data$activity_lables[req_data$activity_lables==3]<-"Walking Downstairs"
req_data$activity_lables[req_data$activity_lables==4]<-"Sitting"
req_data$activity_lables[req_data$activity_lables==5]<-"Standing"
req_data$activity_lables[req_data$activity_lables==6]<-"Laying"
#Appropriately labels the data set with descriptive variable names.
names(req_data) <- gsub("Acc", "Accelerator", names(req_data))
names(req_data) <- gsub("Mag", "Magnitude", names(req_data))
library(data.table)
#read X_test.txt file
x<-read.table("./test/X_test.txt")
#change the column names of X_test.txt data frame
names(x)<-read.table("features.txt")[,2]
#read y_test.txt
y<-read.table("./test/y_test.txt")
#change its column name
names(y)<-"activity_lables"
#read subject_test
z<-read.table("./test/subject_test.txt")
#change its name
names(z)<-"volunteer"
#bind x,y,z to form test data frame
test<-cbind(x,y,z)
#Repeat above steps to create train data frame
x_train <-read.table("./train/X_train.txt")
names(x_train) <- read.table("features.txt")[,2]
y_train <- read.table("./train/y_train.txt")
names(y_train)<-"activity_lables"
z_train <- read.table("./train/subject_train.txt")
names(z_train)<-"volunteer"
train<-cbind(x_train,y_train,z_train)
#merge test and train data frame.
merged_data <- rbind(test,train)
#Extracts only the measurements on the mean and standard deviation for each measurement
req_col<-grepl("mean|std",names(merged_data))
req_col[562:563]<-c(TRUE,TRUE)
req_data<-as.data.table(merged_data[ ,req_col])
#Uses descriptive activity names to name the activities in the data set
req_data$activity_lables[req_data$activity_lables==1]<-"Walking"
req_data$activity_lables[req_data$activity_lables==2]<-"Walking Upstairs"
req_data$activity_lables[req_data$activity_lables==3]<-"Walking Downstairs"
req_data$activity_lables[req_data$activity_lables==4]<-"Sitting"
req_data$activity_lables[req_data$activity_lables==5]<-"Standing"
req_data$activity_lables[req_data$activity_lables==6]<-"Laying"
#Appropriately labels the data set with descriptive variable names.
names(req_data) <- gsub("Acc", "Accelerator", names(req_data))
names(req_data) <- gsub("Mag", "Magnitude", names(req_data))
tidy_data <- req_data[,lapply(.SD,mean),.(volunteer,activity_lables)]
# write data to text file
write.table(tidy_data,row.name=FALSE, file = "./tidy_data.txt")
y<-read.table("tidy_data.txt")
names(y)
y
library(data.table)
# read and load X_test.txt file
x_test <- read.table('./test/X_test.txt')
# set the column names of x_test data frame
names(x_test) <- read.table('features.txt')[,2]
# read and load y_test.txt file
y_test <- read.table('./test/y_test.txt')
# set the column names of y_test data frame
names(y_test) <- c('Activity Labels')
# read and load subject_test.txt file
s_test <- read.table('./test/subject_test.txt')
# set the column names of s_test data frame
names(s_test) <- c('Who performed the activity')
# combine s_test, y_test, x_test to obtain complete test data
test <- cbind(s_test,y_test,x_test)
# repeat the same as above to obtain complete train data
# read and load X_train.txt file
x_train <- read.table('./train/X_train.txt')
# set the column names of x_train data frame
names(x_train) <- read.table('features.txt')[,2]
# read and load y_train.txt file
y_train <- read.table('./train/y_train.txt')
# set the column names of y_train data frame
names(y_train) <- c('Activity Labels')
# read and load subject_train.txt file
s_train <- read.table('./train/subject_train.txt')
# set the column names of s_train data frame
names(s_train) <- c('Who performed the activity')
# combine s_train, y_train, x_rain to obtain complete train data
train <- cbind(s_train,y_train,x_train)
# merge test and train datasets
merged_data <- rbind(test,train)
# read and load descriptive activity file
des_labels <- read.table('activity_labels.txt')[,2]
# Uses descriptive activity names to name the activities in the data set
merged_data[,2] <- sapply(merged_data[,'Activity Labels'], function(i) des_labels[i])
# Extracts only the measurements on the mean and standard deviation for each measurement
required_col <- grepl("mean|std", names(merged_data))
required_col[1:2] <- c(TRUE,TRUE)
tidy_data <- as.data.table(merged_data[,required_col])
# some changes to the columns name to make the life easy
nlist <- names(tidy_data)
nlist[1:2] <- c('WhoPerformActivity','ALabels')
names(tidy_data) <- nlist
# create dataset mention in the 5th step
tidy_data2 <- tidy_data[,lapply(.SD,mean),.(WhoPerformActivity,ALabels)]
# write data to text file
write.table(tidy_data2,row.name=FALSE, file = "./tidy_data.txt")
y<-read.table("tidy_data.txt")
names(y)
